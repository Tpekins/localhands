datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PROVIDER
  CLIENT
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ServiceOrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  MTN_MOBILE_MONEY
  ORANGE_MONEY
  BANK_TRANSFER
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}
enum AssetType {
  IMAGE
  AREA
}

model User {
  id               Int              @id @default(autoincrement())
  role             UserRole         @default(CLIENT)
  phoneNumber      String           @unique
  email            String           @unique
  passwordHash     String
  profile          Profile?
  services         Service[]
  serviceOrders    ServiceOrder[]
  contracts        Contract[]
  reviews          Review[]
  bookings         Booking[]
  notifications    Notification[]
  proposals        Proposal[]
  messages         Message[]
  servicePackages  ServicePackage[] // Relation to ServicePackage
  provider         Provider?        @relation("UserProvider")
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  createdAt        DateTime         @default(now())
  lastLogin        DateTime?
}

model Profile {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [userId], references: [id])
  userId             Int              @unique
  bio                String?
  mobileMoneyNumber  String?
  bankAccountNumber  String?
  nationalIdUrl      String?
  verificationStatus VerificationStatus? @default(PENDING)
  location           String?
  createdAt          DateTime         @default(now())
}


model Service {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  category        Category?        @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  price           Float
  status          String           @default("available") // available, unavailable, archived
  provider        User             @relation(fields: [providerId], references: [id])
  providerId      Int
  serviceOrders   ServiceOrder[]
  bookings        Booking[]
  createdAt       DateTime         @default(now())
  proposals       Proposal[]
  servicePackages ServicePackage[]
  assets          ServiceAsset[]   // Unified relation for both images and areas
  providerModel   Provider?        @relation(fields: [providerModelId], references: [id])
  providerModelId Int?
  views           Int              @default(0)  // Add this line
}

model ServiceOrder {
  id            Int              @id @default(autoincrement())
  service       Service          @relation(fields: [serviceId], references: [id])
  serviceId     Int
  client        User             @relation(fields: [clientId], references: [id])
  clientId      Int
  description   String
  budget        Float?
  status        ServiceOrderStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  contract      Contract?
}

model Contract {
  id            Int              @id @default(autoincrement())
  serviceOrder  ServiceOrder     @relation(fields: [serviceOrderId], references: [id])
  serviceOrderId Int              @unique
  escrowAmount  Float
  status        ContractStatus @default(ACTIVE)
  payments      Payment[]
  reviews       Review[]
  createdAt     DateTime         @default(now())
  users         User[]
  proposals     Proposal[]
}


model Payment {
  id            Int             @id @default(autoincrement())
  contract      Contract      @relation(fields: [contractId], references: [id])
  contractId    Int
  amount        Float
  paymentMethod PaymentMethod @default(MTN_MOBILE_MONEY)
  transactionId String
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
}

model Review {
  id          Int      @id @default(autoincrement())
  contract    Contract @relation(fields: [contractId], references: [id])
  contractId  Int
  reviewer    User     @relation(fields: [reviewerId], references: [id])
  reviewerId  Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

model Booking {
  id        Int           @id @default(autoincrement())
  service   Service     @relation(fields: [serviceId], references: [id])
  serviceId Int
  client    User        @relation(fields: [clientId], references: [id])
  clientId  Int
  startTime DateTime
  endTime   DateTime
  location  String?
  status    BookingStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  services    Service[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Proposal {
  id           Int          @id @default(autoincrement())
  provider   User           @relation(fields: [providerId], references: [id])
  providerId Int
  service      Service        @relation(fields: [serviceId], references: [id])
  serviceId    Int
  coverLetter  String
  bidAmount    Float
  status       ProposalStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  contract     Contract?      @relation(fields: [contractId], references: [id])
  contractId   Int?
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String
  timestamp  DateTime @default(now())
  users      User[]
}

model ServicePackage {
  id          Int       @id @default(autoincrement())
  providerId  Int
  provider    User      @relation(fields: [providerId], references: [id])
  title       String
  description String?
  price       Float
  services    Service[] // Many-to-many relationship with Service
  createdAt   DateTime  @default(now())
}


model Availability {
  id           Int      @id @default(autoincrement())
  providerId   Int
  provider     Provider @relation(fields: [providerId], references: [id])
  dayOfWeek    Int
  startTime    DateTime
  endTime      DateTime
}

model Provider {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation("UserProvider", fields: [userId], references: [id])
  services    Service[]
  availability Availability[]
  createdAt   DateTime @default(now())
}

model ServiceAsset {
  id         Int      @id @default(autoincrement())
  serviceId  Int
  service    Service  @relation(fields: [serviceId], references: [id])
  type       AssetType

  // Fields specific to IMAGE assets:
  imageUrl   String?  // Only populated if type is IMAGE
  caption    String?  // Only relevant for IMAGE assets

  // Field specific to AREA assets:
  areaName   String?  // Only populated if type is AREA
  createdAt  DateTime @default(now())
}